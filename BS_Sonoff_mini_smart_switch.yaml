blueprint:
  name: Sonoff Mini Smart Switch Blueprint (Enhanced)
  description: >
    This blueprint provides basic control over Sonoff devices using a simple “dumb” switch.
    You can select your Sonoff device’s integration (SonoffLAN or ZHA) and model
    (MiniR4M, MiniR4, ZBMINIR2, or Other). In addition, choose the category of the target
    device (e.g., Light, Fan, or Other) and whether it is smart or non‐smart.
    
    **Operating Modes:**
    - **toggle:** Directly toggles the target entity.
    - **detached:** Sends an event to Home Assistant for further custom automations.
    
    For fans, you can choose between:
    - **manual:** The fan runs for a preset duration.
    - **auto:** The fan activates when a humidity sensor’s reading exceeds a threshold.
  domain: automation
  input:
    sonoff_integration:
      name: Sonoff Integration
      description: "Select the integration used by your Sonoff device."
      default: sonofflan
      selector:
        select:
          options:
            - sonofflan
            - zha
    sonoff_model:
      name: Sonoff Device Model
      description: "Select your Sonoff device model."
      default: MiniR4M
      selector:
        select:
          options:
            - MiniR4M
            - MiniR4
            - ZBMINIR2
            - Other
    sonoff_device:
      name: Sonoff Device
      description: "Select your Sonoff device that detects the button press."
      selector:
        device:
          integration:
            - sonofflan
            - zha
          manufacturer: ITEAD
    switch_mode:
      name: Operating Mode
      description: >
        Choose the operating mode:
        - **toggle:** Directly toggle the target entity.
        - **detached:** Send an event to Home Assistant for custom automations.
      default: toggle
      selector:
        select:
          options:
            - toggle
            - detached
    target_entity:
      name: Target Entity
      description: "Select the entity you want to control (e.g., light, fan, switch, etc.)."
      selector:
        entity: {}
    target_device_category:
      name: Target Device Category
      description: >
        Select the category of the target device. This determines which service is used to control it.
      default: "Light (Smart)"
      selector:
        select:
          options:
            - "Light (Smart)"
            - "Light (Non-Smart)"
            - "Fan (Smart)"
            - "Fan (Non-Smart)"
            - "Other"
    non_smart_scene:
      name: Non-Smart Device Scene
      description: >
        (Optional) For non-smart devices, specify a scene to trigger.
        Leave blank to use a simple toggle.
      required: false
      selector:
        entity:
          domain: scene
    fan_control_mode:
      name: Fan Control Mode
      description: >
        If controlling a smart fan, choose:
        - **manual:** Run the fan for a preset duration.
        - **auto:** Activate the fan based on a humidity sensor reading.
      default: manual
      selector:
        select:
          options:
            - manual
            - auto
    fan_duration:
      name: Fan Run Duration
      description: "Time in seconds to run the fan in manual mode."
      default: 60
      selector:
        number:
          min: 1
          max: 3600
          unit_of_measurement: seconds
    humidity_threshold:
      name: Humidity Threshold
      description: "In auto mode, the fan will activate if humidity exceeds this value."
      default: 60
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: '%'
    sensor_entity:
      name: Humidity Sensor
      description: "(Optional) The humidity sensor entity for auto fan control."
      required: false
      selector:
        entity:
          domain: sensor

trigger:
  # Two triggers allow using either SonoffLAN or ZHA devices.
  - platform: device
    device_id: !input sonoff_device
    domain: sonofflan
    type: button_short_press
  - platform: device
    device_id: !input sonoff_device
    domain: zha
    type: button_short_press

condition: []

action:
  - choose:
      # --- Toggle Mode ---
      - conditions:
          - condition: template
            value_template: "{{ switch_mode == 'toggle' }}"
        sequence:
          - choose:
              # Smart Fan – Manual Mode
              - conditions:
                  - condition: template
                    value_template: "{{ target_device_category == 'Fan (Smart)' }}"
                  - condition: template
                    value_template: "{{ fan_control_mode == 'manual' }}"
                sequence:
                  - service: fan.turn_on
                    target:
                      entity_id: !input target_entity
                  - delay:
                      seconds: !input fan_duration
                  - service: fan.turn_off
                    target:
                      entity_id: !input target_entity
              # Smart Fan – Auto Mode (activate only if sensor reading exceeds threshold)
              - conditions:
                  - condition: template
                    value_template: "{{ target_device_category == 'Fan (Smart)' }}"
                  - condition: template
                    value_template: "{{ fan_control_mode == 'auto' }}"
                sequence:
                  - condition: template
                    value_template: >
                      {% if sensor_entity %}
                        {{ states(sensor_entity) | float > humidity_threshold }}
                      {% else %}
                        false
                      {% endif %}
                  - service: fan.turn_on
                    target:
                      entity_id: !input target_entity
              # Smart Light Control
              - conditions:
                  - condition: template
                    value_template: "{{ target_device_category == 'Light (Smart)' }}"
                sequence:
                  - service: light.toggle
                    target:
                      entity_id: !input target_entity
              # Non-Smart Devices (Light or Fan Non-Smart) and Other
              - conditions:
                  - condition: template
                    value_template: >
                      {{ target_device_category in ['Light (Non-Smart)', 'Fan (Non-Smart)', 'Other'] }}
                sequence:
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ non_smart_scene not in [None, ''] }}"
                        sequence:
                          - service: scene.turn_on
                            target:
                              entity_id: !input non_smart_scene
                      - default:
                          - service: homeassistant.toggle
                            target:
                              entity_id: !input target_entity
          # Fallback if no inner conditions match.
          - default:
              - service: homeassistant.toggle
                target:
                  entity_id: !input target_entity

      # --- Detached Mode ---
      - conditions:
          - condition: template
            value_template: "{{ switch_mode == 'detached' }}"
        sequence:
          - event: sonoff_switch_event
            event_data:
              target_entity: !input target_entity
              switch_mode: !input switch_mode

  # Optional notification confirming blueprint execution.
  - service: persistent_notification.create
    data:
      message: "Sonoff Mini Smart Switch Blueprint executed."
      title: "Blueprint Execution"

mode: single
