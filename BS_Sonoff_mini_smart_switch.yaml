blueprint:
  name: "Sonoff Mini Smart Switch"
  description: |
    🔌 **Sonoff Mini Smart Switch Blueprint**
    
    This blueprint provides flexible control over **Sonoff MiniR4M, MiniR4, ZBMINIR2, and other compatible devices**. It allows you to use a dumb switch connected to a Sonoff device to control various devices, including lights, fans, and other smart appliances.
    
    **Supported Home Assistant Integrations:**
    - 🏠 **ZHA (Zigbee Home Automation)** → For Zigbee-based Sonoff devices like the ZBMINIR2.
    - 🌐 **SonoffLAN** → For WiFi-based Sonoff devices, ensuring local control.
    
    **Setup Instructions for eWeLink Users:**
    - If using **SonoffLAN**, enable **LAN mode** in the **eWeLink app**.
    - Enable **relay detachment** in eWeLink under **Device Settings → Detach Relay** (if supported by your device).
    - Ensure the device is correctly added to Home Assistant under **SonoffLAN or ZHA**.
    
    **How It Works:**
    - The Sonoff device detects switch presses via its **S1/S2 terminals**.
    - If using **SonoffLAN**, switch presses are tracked using **event triggers (`sonoff.button`)**.
    - If using **ZHA**, switch presses are tracked as **state changes in a `binary_sensor` entity**.
    - If the device is in **relay mode**, pressing the switch toggles the relay.
    - If in **detached mode**, the switch sends a signal without toggling the relay.
    
    **Supported Sonoff Devices:**
    - 🟢 **Sonoff MiniR4M** → Relay detachment enabled by default.
    - 🔵 **Sonoff MiniR4** → Requires manual relay detachment in eWeLink.
    - 🟠 **Sonoff ZBMINIR2** → Zigbee-based, supports local control via ZHA.
    - ⚙️ **Other Sonoff Models** → Default relay behavior.
    
    **Control Options:**
    - 💡 **Smart or Dumb Lamp** → Toggle power or activate a scene.
    - 🌬 **Bathroom Fan** → Supports humidity-based automation and manual control.
    - ⚙️ **Any Other Device** → Toggle smart/non-smart appliances.
    
    **Bathroom Fan Automation:**
    - 🖲 **Manual Mode** → Pressing the switch runs the fan for a set time.
    - 🌫 **Auto Mode** → Fan activates when humidity exceeds a threshold.
    - 🚿 **Shower Detection** → Detects humidity spikes and turns on the fan.
    - 🔄 **Hybrid Mode** → Manual control + automatic humidity activation.
    - ⏳ **Runtime Control** → Fan turns off automatically based on timer.
    
    **Switch Configurations:**
    - 🎚 **Rocker Switch** → Stays in on/off position, toggles device state.
    - 🔘 **Push Button** → Supports single, double, and long press actions:
      - **Single Press** → Toggles the assigned device.
      - **Double Press** → Activates a scene (if configured).
      - **Long Press (Contextual Action)**:
        - **Lamp:** Toggles the light or activates a scene.
        - **Fan:** Runs the fan for a preset time.
        - **Other:** Toggles an additional device or predefined action.
    
    **Control Modes:**
    - 🔄 **Relay Toggle** → The relay turns on/off when the switch is pressed.
    - 🔌 **Detached Mode** → The switch functions independently and does not toggle the relay.
    - 🎬 **Smart Scene** → Activates a pre-configured Home Assistant scene.
    
    **Additional Features:**
    - 🔄 **Relay Detachment Support**
    - 🎬 **Scene Activation**
    - 🔄 **Multi-Device Control**
    - 🕒 **Time-Based Scheduling**
    - 📊 **Humidity-Triggered Fan Control**
    - ⏱ **Frequent Humidity Polling (Every 30 Seconds)**
    - 🔎 **Filtered Device Selection Based on Control Type**
    - ⏳ **Custom Fan Runtime for Manual Activation**

  domain: automation
  input:
    control_type:
      name: "Control Type"
      description: "Select what kind of device you want to control."
      selector:
        select:
          options:
            - "Lamp"
            - "Fan"
            - "Other"

    sonoff_switch:
      name: "Sonoff Switch"
      description: "Select the Sonoff switch entity that detects dumb switch presses."
      selector:
        entity:
          domain: binary_sensor
          integration: sonoff

    device_to_control:
      name: "Device to Control"
      description: "Choose the device(s) to control."
      selector:
        entity:
          domain: 
            - light
            - fan
            - switch
          multiple: true

    fan_runtime:
      name: "Manual Fan Runtime (minutes)"
      description: "How long the fan runs when manually activated."
      default: 5
      selector:
        number:
          min: 1
          max: 60
          unit_of_measurement: "minutes"

trigger:
  - platform: event
    event_type: sonoff.button
    event_data:
      entity_id: !input sonoff_switch
      click_type: single
  - platform: event
    event_type: sonoff.button
    event_data:
      entity_id: !input sonoff_switch
      click_type: double
  - platform: event
    event_type: sonoff.button
    event_data:
      entity_id: !input sonoff_switch
      click_type: long

action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ control_type == 'Fan' }}"
        sequence:
          - service: switch.turn_on
            target:
              entity_id: !input device_to_control
          - delay:
              minutes: !input fan_runtime
          - service: switch.turn_off
            target:
              entity_id: !input device_to_control
      - conditions:
          - condition: template
            value_template: "{{ control_type == 'Lamp' }}"
        sequence:
          - service: light.toggle
            target:
              entity_id: !input device_to_control
