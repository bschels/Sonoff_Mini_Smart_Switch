blueprint:
  name: Sonoff Mini Smart Switch Blueprint (Enhanced – Sensor Trigger)
  description: >
    This blueprint lets you control devices via a Sonoff-style button press
    detected by a sensor. It supports various target device types:
      • Smart Lights – toggles a light.
      • Smart Fans – supports three control modes:
          ○ manual: run for a fixed duration.
          ○ auto: run only if humidity is high.
          ○ both: turn on immediately, then after the fixed duration, turn off if humidity is low.
      • Non-Smart Devices – either toggles the device or triggers a scene.
      
    Choose "toggle" to directly control the target, or "detached" to fire an event for custom automation.
  domain: automation
  input:
    # ───── Sonoff / Action Sensor Settings ─────────────────────────────
    sonoff_model:
      name: Sonoff Device Model
      description: >
        Select your Sonoff device model (for reference only).
      default: MiniR4M
      selector:
        select:
          options:
            - MiniR4M
            - MiniR4
            - ZBMINIR2
            - Other
    action_sensor:
      name: Action Sensor
      description: >
        Choose the sensor that reports the button action.
        (It is recommended that its entity_id includes "_action".)
      selector:
        entity:
          domain: sensor
    switch_mode:
      name: Operating Mode
      description: >
        How should the target device be controlled?
          • toggle: Directly call the service.
          • detached: Fire an event for custom automations.
      default: toggle
      selector:
        select:
          options:
            - toggle
            - detached
    # ───── Target Device Selection ───────────────────────────────────────
    target_entity:
      name: Target Entity
      description: >
        Select the entity to control (e.g. light, fan, or switch).
      selector:
        entity: {}
    target_device_category:
      name: Target Device Category
      description: >
        Choose the type of target device. This determines the service call:
          • Light (Smart): toggles a light.
          • Light (Non-Smart): toggles or triggers a scene for a non-smart light.
          • Fan (Smart): runs a fan with additional control options.
          • Fan (Non-Smart): toggles a non-smart fan.
          • Other: simply toggles the entity.
      default: "Light (Smart)"
      selector:
        select:
          options:
            - "Light (Smart)"
            - "Light (Non-Smart)"
            - "Fan (Smart)"
            - "Fan (Non-Smart)"
            - "Other"
    # ───── Fan Control Options (Only applicable if "Fan (Smart)" is chosen) ─
    fan_control_mode:
      name: Fan Control Mode
      description: >
        For a smart fan, choose how it should be controlled:
          • manual: run for a fixed duration.
          • auto: run only if humidity exceeds the threshold.
          • both: turn on immediately; after the fixed duration, turn off if humidity is low.
      default: both
      selector:
        select:
          options:
            - manual
            - auto
            - both
    fan_duration:
      name: Fan Run Duration
      description: "Duration (in seconds) for manual fan operation."
      default: 60
      selector:
        number:
          min: 1
          max: 3600
          unit_of_measurement: seconds
    humidity_threshold:
      name: Humidity Threshold
      description: >
        In auto or both mode, the fan remains on if humidity exceeds this percentage.
      default: 60
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: '%'
    sensor_entity:
      name: Humidity Sensor
      description: >
        (Optional) Select the humidity sensor used for fan auto control.
        Only sensors with a device_class of "humidity" are shown.
      selector:
        entity:
          domain: sensor
          device_class: humidity
      default: ""
    # ───── Non-Smart Device Options ─────────────────────────────────────
    non_smart_scene:
      name: Non-Smart Device Scene
      description: >
        (Optional) For non-smart devices, specify a scene to trigger.
        Leave blank to simply toggle the target entity.
      selector:
        entity:
          domain: scene
      default: ""
trigger:
  - platform: state
    entity_id: !input action_sensor
    to: "single"
condition: []
action:
  - choose:
      # ── Toggle Mode Branch ──────────────────────────────────────────────
      - conditions:
          - condition: template
            value_template: "{{ switch_mode == 'toggle' }}"
        sequence:
          - choose:
              # Fan (Smart) Control
              - conditions:
                  - condition: template
                    value_template: "{{ target_device_category == 'Fan (Smart)' }}"
                sequence:
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ fan_control_mode == 'manual' }}"
                        sequence:
                          - service: fan.turn_on
                            target:
                              entity_id: !input target_entity
                          - delay:
                              seconds: !input fan_duration
                          - service: fan.turn_off
                            target:
                              entity_id: !input target_entity
                      - conditions:
                          - condition: template
                            value_template: "{{ fan_control_mode == 'auto' }}"
                        sequence:
                          - condition: template
                            value_template: >
                              {% if sensor_entity != "" %}
                                {{ states(sensor_entity) | float > humidity_threshold }}
                              {% else %}
                                false
                              {% endif %}
                          - service: fan.turn_on
                            target:
                              entity_id: !input target_entity
                      - conditions:
                          - condition: template
                            value_template: "{{ fan_control_mode == 'both' }}"
                        sequence:
                          - service: fan.turn_on
                            target:
                              entity_id: !input target_entity
                          - delay:
                              seconds: !input fan_duration
                          - choose:
                              - conditions:
                                  - condition: template
                                    value_template: >
                                      {% if sensor_entity != "" %}
                                        {{ states(sensor_entity) | float <= humidity_threshold }}
                                      {% else %}
                                        true
                                      {% endif %}
                                sequence:
                                  - service: fan.turn_off
                                    target:
                                      entity_id: !input target_entity
                              - default: []
                  - default: []
              # Smart Light Control
              - conditions:
                  - condition: template
                    value_template: "{{ target_device_category == 'Light (Smart)' }}"
                sequence:
                  - service: light.toggle
                    target:
                      entity_id: !input target_entity
              # Non-Smart Devices and Other
              - conditions:
                  - condition: template
                    value_template: "{{ target_device_category in ['Light (Non-Smart)', 'Fan (Non-Smart)', 'Other'] }}"
                sequence:
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ non_smart_scene != '' }}"
                        sequence:
                          - service: scene.turn_on
                            target:
                              entity_id: !input non_smart_scene
                      - default:
                          - service: homeassistant.toggle
                            target:
                              entity_id: !input target_entity
          - default:
              - service: homeassistant.toggle
                target:
                  entity_id: !input target_entity
      # ── Detached Mode Branch ──────────────────────────────────────────────
      - conditions:
          - condition: template
            value_template: "{{ switch_mode == 'detached' }}"
        sequence:
          - event: sonoff_switch_event
            event_data:
              target_entity: !input target_entity
              switch_mode: !input switch_mode
  - service: persistent_notification.create
    data:
      message: "Sonoff Mini Smart Switch Blueprint executed."
      title: "Blueprint Execution"
mode: single
