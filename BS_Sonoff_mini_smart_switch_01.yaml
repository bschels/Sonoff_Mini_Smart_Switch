blueprint:
  name: Sonoff Mini Smart Switch Blueprint (Enhanced – Sensor Trigger with IKEA Option)
  description: >
    This blueprint lets you control devices via a Sonoff-style button press using a sensor.
    It supports multiple target device types:
      • Smart Lights (generic)
      • IKEA Bulbs (via TRÅDFRI)
      • Smart Fans (with manual, auto, or combined modes)
      • Non-smart devices (via scene or toggle)
      
    **Fan Control Modes:**
      - **manual:** Run the fan for a fixed duration.
      - **auto:** Run the fan only if humidity exceeds a threshold.
      - **both:** Turn the fan on immediately and, after the fixed duration,
                turn it off only if humidity is low.
                
    When using an IKEA bulb, you can use the dedicated field for easier selection.
  domain: automation
  input:
    # ─── Sonoff / Action Sensor Settings ────────────────────────────────
    sonoff_model:
      name: Sonoff Device Model
      description: >
        Select your Sonoff device model.
        (This is for reference only.)
      default: MiniR4M
      selector:
        select:
          options:
            - MiniR4M
            - MiniR4
            - ZBMINIR2
            - Other
    action_sensor:
      name: Action Sensor
      description: >
        Choose the sensor that reports the button action.
        (It is recommended that its entity_id includes "_action" and that it comes from a Sonoff device.)
      selector:
        entity:
          domain: sensor
          device:
            integration: "sonofflan"
            manufacturer: "ITEAD"
    switch_mode:
      name: Operating Mode
      description: >
        How should the target device be controlled?
        • **toggle:** Directly call the service (for lights, fans, etc.).
        • **detached:** Fire an event for custom automations.
      default: toggle
      selector:
        select:
          options:
            - toggle
            - detached
    # ─── Target Device Selection ─────────────────────────────────────────
    target_entity:
      name: Target Entity
      description: >
        Select the target entity to control.
        Use this if your device is not an IKEA bulb.
      selector:
        entity: {}
    ikea_bulb:
      name: IKEA Bulb
      description: >
        (Optional) Select your IKEA bulb.
        When you choose "IKEA Bulb (Smart)" below, this value will be used.
      selector:
        entity:
          domain: light
          device:
            integration: "tradfri"
            manufacturer: "IKEA"
      default: ""
    target_device_category:
      name: Target Device Category
      description: >
        Choose the type of device to control.
        This selection determines which service is used.
      default: "Light (Smart)"
      selector:
        select:
          options:
            - "Light (Smart)"
            - "IKEA Bulb (Smart)"
            - "Light (Non-Smart)"
            - "Fan (Smart)"
            - "Fan (Non-Smart)"
            - "Other"
    # ─── Fan Control Options (Only for Fan (Smart)) ───────────────────────
    fan_control_mode:
      name: Fan Control Mode
      description: >
        For a smart fan, choose how it should be controlled:
          • **manual:** Run for a fixed duration.
          • **auto:** Run only if humidity is high.
          • **both:** Run immediately, then turn off after the duration if humidity is low.
      default: both
      selector:
        select:
          options:
            - manual
            - auto
            - both
    fan_duration:
      name: Fan Run Duration
      description: "Set the duration (in seconds) for manual fan operation."
      default: 60
      selector:
        number:
          min: 1
          max: 3600
          unit_of_measurement: seconds
    humidity_threshold:
      name: Humidity Threshold
      description: >
        In auto or both mode, the fan will remain on if the humidity exceeds this percentage.
      default: 60
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: '%'
    sensor_entity:
      name: Humidity Sensor
      description: >
        (Optional) Select the humidity sensor.
        Only sensors with a device class of "humidity" are shown.
      selector:
        entity:
          domain: sensor
          device_class: humidity
      default: ""
    # ─── Non-Smart Device Options ─────────────────────────────────────────
    non_smart_scene:
      name: Non-Smart Device Scene
      description: >
        (Optional) For non-smart devices, specify a scene to trigger.
        Leave blank to simply toggle the target entity.
      selector:
        entity:
          domain: scene
      default: ""
trigger:
  - platform: state
    entity_id: !input action_sensor
    to: "single"
condition: []
action:
  - choose:
      # ── Toggle Mode Branch ────────────────────────────────────────────
      - conditions:
          - condition: template
            value_template: "{{ switch_mode == 'toggle' }}"
        sequence:
          - choose:
              # Fan (Smart) Control
              - conditions:
                  - condition: template
                    value_template: "{{ target_device_category == 'Fan (Smart)' }}"
                sequence:
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ fan_control_mode == 'manual' }}"
                        sequence:
                          - service: fan.turn_on
                            target:
                              entity_id: !input target_entity
                          - delay:
                              seconds: !input fan_duration
                          - service: fan.turn_off
                            target:
                              entity_id: !input target_entity
                      - conditions:
                          - condition: template
                            value_template: "{{ fan_control_mode == 'auto' }}"
                        sequence:
                          - condition: template
                            value_template: >
                              {% if sensor_entity != "" %}
                                {{ states(sensor_entity) | float > humidity_threshold }}
                              {% else %}
                                false
                              {% endif %}
                          - service: fan.turn_on
                            target:
                              entity_id: !input target_entity
                      - conditions:
                          - condition: template
                            value_template: "{{ fan_control_mode == 'both' }}"
                        sequence:
                          - service: fan.turn_on
                            target:
                              entity_id: !input target_entity
                          - delay:
                              seconds: !input fan_duration
                          - choose:
                              - conditions:
                                  - condition: template
                                    value_template: >
                                      {% if sensor_entity != "" %}
                                        {{ states(sensor_entity) | float <= humidity_threshold }}
                                      {% else %}
                                        true
                                      {% endif %}
                                sequence:
                                  - service: fan.turn_off
                                    target:
                                      entity_id: !input target_entity
                              - default: []
                  - default: []
              # Smart Light Control
              - conditions:
                  - condition: template
                    value_template: "{{ target_device_category == 'Light (Smart)' }}"
                sequence:
                  - service: light.toggle
                    target:
                      entity_id: !input target_entity
              # IKEA Bulb Control
              - conditions:
                  - condition: template
                    value_template: "{{ target_device_category == 'IKEA Bulb (Smart)' }}"
                sequence:
                  - service: light.toggle
                    target:
                      entity_id: >
                        {% if ikea_bulb == "" %}
                          {{ target_entity }}
                        {% else %}
                          {{ ikea_bulb }}
                        {% endif %}
              # Non-Smart Devices & Other
              - conditions:
                  - condition: template
                    value_template: "{{ target_device_category in ['Light (Non-Smart)', 'Fan (Non-Smart)', 'Other'] }}"
                sequence:
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ non_smart_scene != '' }}"
                        sequence:
                          - service: scene.turn_on
                            target:
                              entity_id: !input non_smart_scene
                      - default:
                          - service: homeassistant.toggle
                            target:
                              entity_id: !input target_entity
          - default:
              - service: homeassistant.toggle
                target:
                  entity_id: !input target_entity
      # ── Detached Mode Branch ────────────────────────────────────────────
      - conditions:
          - condition: template
            value_template: "{{ switch_mode == 'detached' }}"
        sequence:
          - event: sonoff_switch_event
            event_data:
              target_entity: !input target_entity
              switch_mode: !input switch_mode
  - service: persistent_notification.create
    data:
      message: "Sonoff Mini Smart Switch Blueprint executed."
      title: "Blueprint Execution"
mode: single
